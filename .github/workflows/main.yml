on:
  push:
    branches: [ main ]

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

        # Gradle test를 실행한다
    - name: Test with Gradle  
      run: ./gradlew --info test----> 여기까지 진행후 *.jar파일 만듬

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build  
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devops_step1 .

    # 4. DockerHub 로그인
    - name: docker login      
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
 
      run: docker push ${{ secrets.DOCKER_USERNAME }}/devops_step1

  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
    - name: docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    # 8080 -> 80 포트로 수행하도록 지정
    - name: Docker run
      run: |   
        sudo docker stop devops_step1 && sudo docker rm devops_step1 && sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/devops_step1:latest
        sudo docker run -d -p 80:8080 --name devops_step1 --restart always ${{ secrets.DOCKER_USERNAME }}/devops_step1:latest
